{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/rotem.levi/Downloads/CakesShoppingOnline_/CakesShoppingOnline_/fe/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from 'src/environments/environment';\nimport { AuthActionType, userLoggedInAction, userLoggedOutAction, userRegisteredAction } from '../redux/auth-state';\nimport store from '../redux/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  register(user) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // \"http://localhost:3030/api/auth/register\"\n      const addedUser = yield _this.http.post(environment.registerUrl, user).toPromise();\n      console.log(addedUser);\n      store.dispatch(userRegisteredAction(addedUser));\n      return addedUser;\n    })();\n  }\n\n  login(credentials) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // 'loggedInUser' = UserModel with 'username, firstname, lastname, token';\n      // 'first' because I want to display in header\n      // 'token' because I need to send to server to authorize my requests\n      // 'password' WILL NOT BE RETURNED TO CLIENT\n      const loggedInUser = yield _this2.http.post(environment.loginUrl, credentials).toPromise();\n      store.dispatch(userLoggedInAction(loggedInUser));\n      return loggedInUser;\n    })();\n  }\n\n  logout() {\n    store.dispatch(userLoggedOutAction());\n    store.dispatch({\n      type: AuthActionType.UserLoggedOut,\n      payload: null\n    });\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/rotem.levi/Downloads/CakesShoppingOnline_/CakesShoppingOnline_/fe/src/app/services/auth.service.ts"],"names":["environment","AuthActionType","userLoggedInAction","userLoggedOutAction","userRegisteredAction","store","i0","i1","AuthService","constructor","http","register","user","addedUser","post","registerUrl","toPromise","console","log","dispatch","login","credentials","loggedInUser","loginUrl","logout","type","UserLoggedOut","payload","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,8BAA5B;AACA,SAASC,cAAT,EAAyBC,kBAAzB,EAA6CC,mBAA7C,EAAkEC,oBAAlE,QAA8F,qBAA9F;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AACKC,EAAAA,QAAQ,CAACC,IAAD,EAAO;AAAA;;AAAA;AACjB;AACA,YAAMC,SAAS,SAAS,KAAI,CAACH,IAAL,CAAUI,IAAV,CAAed,WAAW,CAACe,WAA3B,EAAwCH,IAAxC,EAA8CI,SAA9C,EAAxB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACAR,MAAAA,KAAK,CAACc,QAAN,CAAef,oBAAoB,CAACS,SAAD,CAAnC;AACA,aAAOA,SAAP;AALiB;AAMpB;;AACKO,EAAAA,KAAK,CAACC,WAAD,EAAc;AAAA;;AAAA;AACrB;AACA;AACA;AACA;AACA,YAAMC,YAAY,SAAS,MAAI,CAACZ,IAAL,CAAUI,IAAV,CAAed,WAAW,CAACuB,QAA3B,EAAqCF,WAArC,EAAkDL,SAAlD,EAA3B;AACAX,MAAAA,KAAK,CAACc,QAAN,CAAejB,kBAAkB,CAACoB,YAAD,CAAjC;AACA,aAAOA,YAAP;AAPqB;AAQxB;;AACDE,EAAAA,MAAM,GAAG;AACLnB,IAAAA,KAAK,CAACc,QAAN,CAAehB,mBAAmB,EAAlC;AACAE,IAAAA,KAAK,CAACc,QAAN,CAAe;AAAEM,MAAAA,IAAI,EAAExB,cAAc,CAACyB,aAAvB;AAAsCC,MAAAA,OAAO,EAAE;AAA/C,KAAf;AACH;;AAvBoB;;AAyBzBnB,WAAW,CAACoB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAItB,WAAV,EAAuBF,EAAE,CAACyB,QAAH,CAAYxB,EAAE,CAACyB,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACAxB,WAAW,CAACyB,KAAZ,GAAoB,aAAc3B,EAAE,CAAC4B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE3B,WAAT;AAAsB4B,EAAAA,OAAO,EAAE5B,WAAW,CAACoB,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { environment } from 'src/environments/environment';\r\nimport { AuthActionType, userLoggedInAction, userLoggedOutAction, userRegisteredAction } from '../redux/auth-state';\r\nimport store from '../redux/store';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class AuthService {\r\n    constructor(http) {\r\n        this.http = http;\r\n    }\r\n    async register(user) {\r\n        // \"http://localhost:3030/api/auth/register\"\r\n        const addedUser = await this.http.post(environment.registerUrl, user).toPromise();\r\n        console.log(addedUser);\r\n        store.dispatch(userRegisteredAction(addedUser));\r\n        return addedUser;\r\n    }\r\n    async login(credentials) {\r\n        // 'loggedInUser' = UserModel with 'username, firstname, lastname, token';\r\n        // 'first' because I want to display in header\r\n        // 'token' because I need to send to server to authorize my requests\r\n        // 'password' WILL NOT BE RETURNED TO CLIENT\r\n        const loggedInUser = await this.http.post(environment.loginUrl, credentials).toPromise();\r\n        store.dispatch(userLoggedInAction(loggedInUser));\r\n        return loggedInUser;\r\n    }\r\n    logout() {\r\n        store.dispatch(userLoggedOutAction());\r\n        store.dispatch({ type: AuthActionType.UserLoggedOut, payload: null });\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}
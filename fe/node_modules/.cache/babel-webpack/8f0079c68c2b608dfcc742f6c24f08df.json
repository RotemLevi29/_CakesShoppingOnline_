{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/rotem.levi/Downloads/CakesShoppingOnline_/CakesShoppingOnline_/fe/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from 'src/environments/environment';\nimport CategoryModel from '../models/category.model';\nimport { categoryAddedAction, categoryDeletedAction, categoriesDownloadedAction, categoryUpdatedAction } from '../redux/categories-state';\nimport store from '../redux/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CategoriesService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  static getAggProductsBySupplier() {\n    throw new Error('Method not implemented.');\n  } // Get all categories: \n\n\n  getAllCategories() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (store.getState().categoriesState.categories.length === 0) {\n        const categories = yield _this.http.get(environment.categoriesUrl).toPromise();\n        store.dispatch(categoriesDownloadedAction(categories));\n      }\n\n      return store.getState().categoriesState.categories;\n    })();\n  } // Get all categories: \n\n\n  getFillteredCategory(catergory, min, max) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const products = yield _this2.http.get(environment.categoriesUrl + `${catergory}/${min}/${max}`).toPromise();\n      return products;\n    })();\n  } // Get one category: \n\n\n  getOneCategory(id) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (store.getState().categoriesState.categories.length === 0) {\n        const categories = yield _this3.http.get(environment.categoriesUrl).toPromise();\n        store.dispatch(categoriesDownloadedAction(categories));\n      }\n\n      const category = store.getState().categoriesState.categories.find(p => p.id === id);\n      return category;\n    })();\n  } // Add category: \n\n\n  addCategory(category) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const myFormData = CategoryModel.convertToFormData(category);\n      const addedCategory = yield _this4.http.post(environment.categoriesUrl, myFormData).toPromise();\n      store.dispatch(categoryAddedAction(addedCategory));\n      return addedCategory;\n    })();\n  } // Update category: \n\n\n  updateCategory(category) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const myFormData = CategoryModel.convertToFormData(category);\n      const updatedCategory = yield _this5.http.put(environment.categoriesUrl + category.id, myFormData).toPromise();\n      store.dispatch(categoryUpdatedAction(updatedCategory));\n      return updatedCategory;\n    })();\n  } // Delete category: \n\n\n  deleteCategory(id) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this6.http.delete(environment.categoriesUrl + id).toPromise();\n      store.dispatch(categoryDeletedAction(id));\n    })();\n  } // Get aoo categories (count num of products in category with GroupBy method): \n\n\n  getAggProductsByCategories() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      const aggProcuts = yield _this7.http.get(environment.categoriesUrl + \"products/agg\").toPromise();\n      return aggProcuts;\n    })();\n  } // Get aoo categories (count num of products for supplier with GroupBy method): \n\n\n  getAggProductsBySupplier() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      const aggProcuts = yield _this8.http.get(environment.categoriesUrl + \"products/agg-supllier\").toPromise();\n      return aggProcuts;\n    })();\n  }\n\n}\n\nCategoriesService.ɵfac = function CategoriesService_Factory(t) {\n  return new (t || CategoriesService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nCategoriesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategoriesService,\n  factory: CategoriesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/rotem.levi/Downloads/CakesShoppingOnline_/CakesShoppingOnline_/fe/src/app/services/category.service.ts"],"names":["environment","CategoryModel","categoryAddedAction","categoryDeletedAction","categoriesDownloadedAction","categoryUpdatedAction","store","i0","i1","CategoriesService","constructor","http","getAggProductsBySupplier","Error","getAllCategories","getState","categoriesState","categories","length","get","categoriesUrl","toPromise","dispatch","getFillteredCategory","catergory","min","max","products","getOneCategory","id","category","find","p","addCategory","myFormData","convertToFormData","addedCategory","post","updateCategory","updatedCategory","put","deleteCategory","delete","getAggProductsByCategories","aggProcuts","ɵfac","CategoriesService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { environment } from 'src/environments/environment';\r\nimport CategoryModel from '../models/category.model';\r\nimport { categoryAddedAction, categoryDeletedAction, categoriesDownloadedAction, categoryUpdatedAction } from '../redux/categories-state';\r\nimport store from '../redux/store';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class CategoriesService {\r\n    constructor(http) {\r\n        this.http = http;\r\n    }\r\n    static getAggProductsBySupplier() {\r\n        throw new Error('Method not implemented.');\r\n    }\r\n    // Get all categories: \r\n    async getAllCategories() {\r\n        if (store.getState().categoriesState.categories.length === 0) {\r\n            const categories = await this.http.get(environment.categoriesUrl).toPromise();\r\n            store.dispatch(categoriesDownloadedAction(categories));\r\n        }\r\n        return store.getState().categoriesState.categories;\r\n    }\r\n    // Get all categories: \r\n    async getFillteredCategory(catergory, min, max) {\r\n        const products = await this.http.get(environment.categoriesUrl + `${catergory}/${min}/${max}`).toPromise();\r\n        return products;\r\n    }\r\n    // Get one category: \r\n    async getOneCategory(id) {\r\n        if (store.getState().categoriesState.categories.length === 0) {\r\n            const categories = await this.http.get(environment.categoriesUrl).toPromise();\r\n            store.dispatch(categoriesDownloadedAction(categories));\r\n        }\r\n        const category = store.getState().categoriesState.categories.find(p => p.id === id);\r\n        return category;\r\n    }\r\n    // Add category: \r\n    async addCategory(category) {\r\n        const myFormData = CategoryModel.convertToFormData(category);\r\n        const addedCategory = await this.http.post(environment.categoriesUrl, myFormData).toPromise();\r\n        store.dispatch(categoryAddedAction(addedCategory));\r\n        return addedCategory;\r\n    }\r\n    // Update category: \r\n    async updateCategory(category) {\r\n        const myFormData = CategoryModel.convertToFormData(category);\r\n        const updatedCategory = await this.http.put(environment.categoriesUrl + category.id, myFormData).toPromise();\r\n        store.dispatch(categoryUpdatedAction(updatedCategory));\r\n        return updatedCategory;\r\n    }\r\n    // Delete category: \r\n    async deleteCategory(id) {\r\n        await this.http.delete(environment.categoriesUrl + id).toPromise();\r\n        store.dispatch(categoryDeletedAction(id));\r\n    }\r\n    // Get aoo categories (count num of products in category with GroupBy method): \r\n    async getAggProductsByCategories() {\r\n        const aggProcuts = await this.http.get(environment.categoriesUrl + \"products/agg\").toPromise();\r\n        return aggProcuts;\r\n    }\r\n    // Get aoo categories (count num of products for supplier with GroupBy method): \r\n    async getAggProductsBySupplier() {\r\n        const aggProcuts = await this.http.get(environment.categoriesUrl + \"products/agg-supllier\").toPromise();\r\n        return aggProcuts;\r\n    }\r\n}\r\nCategoriesService.ɵfac = function CategoriesService_Factory(t) { return new (t || CategoriesService)(i0.ɵɵinject(i1.HttpClient)); };\r\nCategoriesService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CategoriesService, factory: CategoriesService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}